package programmers.notyet;

// 내가 만들어보는 문제 -> 향상된 시저암호
// 프로그래머스 lv1문제에서 n을 1~25가 아니라 1~10000사이의 자연수를 받는다고 가정했을때

public class 시저암호 {
    public String solution(String s, int n) {

        // # 필요한 개념 및 예상되는 알고리즘
        // ## 아스키 코드 - A~Z : 65 ~ 90 / a~z : 97 ~ 122

        // # 실행계획
        // 각 문자열 s를 순회한다.
        // 각 문자열 s의 각 단어가 97부터 122인 경우와 65부터 90인 경우를 나눈다.
        // 나뉜 경우 속에서 "(int)s.charAt(i) + n" 을 수행해서 int sum에 저장한다.
        // 대문자인 경우.. 65 ~ 90 사이.. 26개
        // 만약에 sum이 최대값을 넘는 경우를 생각해보자.
        // 경우1) 97 경우2) 200(X) 경우3) 91인 경우를 생각해보자.
        // 경우4) 116일 경우 -> 90으로 나누면 26이다. -> 26으로 나누면 0 -> X
        // 경우5) 117일 경우 -> 90으로 나누면 27이다. -> 26으로 나누면 1 -> rest
        // 경우6) 118일 경우 -> 90으로 나누면 28이다. -> 26으로 나누면 2 -> rest
        // 경우7) 140일 경우 -> 90으로 나누면 50이다. -> 26으로 나누면 24 -> rest
        // 즉, 90으로 먼저 나누고 1~26사이인 경우는 rest가 되고,
        // 27 ~ 89사이의 나머지가 나올때는 26으로 한번 나눠줘야한다.
        // 경우8) 179일 경우 -> 90으로 나누면 나머지가 89이다. ->
        // 경우9) 180일 경우 -> 90으로 나누면 나머지가 0이다. ->
        System.out.println(89%26);

        // 경우1)의 상황에서 7이 나오게 하려면 어떻게 해야하는가?
        // 90으로 나누면 된다. 나머지가 7이 나온다.
        // 경우2)의 상황에서 20으로 나오면 되는가? 90으로 나눠서 나머지를 하면 20이 나온다.
        // 90으로 나머지를 나누면 0~89까지 경우가 나오지만 65이상의 수들을 다루기 때문에 90으로 나눠도 그 아래 숫자만 나온다.
        // Q. 더하기 1을 해줘야하는가?
        // 또 숫자가 커지면 항상 64를 더해주기 때문에 65아래의 숫자가 나오지 않는다.
        //
        // 소문자인 경우도 똑같이 수행한다.


        // # 풀면서 알게 된 것
        // ## int값을 char로 바꾸는 방법 :

        // # 코드작성
        String answer = "";
        int sum = 0;
        int rest = 0;
        int resultWord = 0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)>=65 && s.charAt(i)<=90){
                sum = (int)s.charAt(i) + n;
                rest = sum % 90;
//                resultWord =
            } else if((int)s.charAt(i)>=97 && (int)s.charAt(i)<=122){

            }
        }
        return answer;
    }

    public static void main(String[] args) {
        시저암호 sol = new 시저암호();
        String s = "";
        int n = 0;
        String answer = sol.solution(s,n);
        System.out.println("정답: " + answer);
    }
}
